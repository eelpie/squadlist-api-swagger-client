/*
 * Squadlist
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package uk.co.squadlist.client.swagger.api;

import uk.co.squadlist.client.swagger.ApiException;
import uk.co.squadlist.model.swagger.Availability;
import uk.co.squadlist.model.swagger.Boat;
import uk.co.squadlist.model.swagger.Change;
import uk.co.squadlist.model.swagger.Instance;
import uk.co.squadlist.model.swagger.Member;
import uk.co.squadlist.model.swagger.OAuthError;
import org.threeten.bp.OffsetDateTime;
import uk.co.squadlist.model.swagger.Outing;
import uk.co.squadlist.model.swagger.Squad;
import uk.co.squadlist.model.swagger.Statistics;
import uk.co.squadlist.model.swagger.SubscriptionRequest;
import uk.co.squadlist.model.swagger.SubscriptionRequestSubmission;
import uk.co.squadlist.model.swagger.Tariff;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * 
     *
     * Recent changes to the system.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changeLogGetTest() throws ApiException {
        List<Change> response = api.changeLogGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of instances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesGetTest() throws ApiException {
        List<Instance> response = api.instancesGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single instance
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesIdGetTest() throws ApiException {
        String id = null;
        Instance response = api.instancesIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of boats for this club
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesInstanceBoatsGetTest() throws ApiException {
        String instance = null;
        List<Boat> response = api.instancesInstanceBoatsGet(instance);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single boat
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesInstanceBoatsIdGetTest() throws ApiException {
        String instance = null;
        String id = null;
        Boat response = api.instancesInstanceBoatsIdGet(instance, id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of members for this club
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesInstanceMembersGetTest() throws ApiException {
        String instance = null;
        List<Member> response = api.instancesInstanceMembersGet(instance);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Usage statistics for this club
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void instancesInstanceStatisticsGetTest() throws ApiException {
        String instance = null;
        List<Statistics> response = api.instancesInstanceStatisticsGet(instance);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single member
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void membersIdGetTest() throws ApiException {
        String id = null;
        Member response = api.membersIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Outings
     *
     * List outings
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outingsGetTest() throws ApiException {
        String instance = null;
        String squads = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        List<Outing> response = api.outingsGet(instance, squads, fromDate, toDate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List availability for this outing
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outingsIdAvailabilityGetTest() throws ApiException {
        String id = null;
        List<Availability> response = api.outingsIdAvailabilityGet(id);

        // TODO: test validations
    }
    
    /**
     * Outing
     *
     * Show a single outing
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outingsIdGetTest() throws ApiException {
        String id = null;
        Outing response = api.outingsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * Outings months
     *
     * List number of outings per month
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outingsMonthsGetTest() throws ApiException {
        String instance = null;
        String squads = null;
        OffsetDateTime fromDate = null;
        OffsetDateTime toDate = null;
        Map<String, String> response = api.outingsMonthsGet(instance, squads, fromDate, toDate);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Generates a list of suggested passwords
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void passwordSuggestionsGetTest() throws ApiException {
        List<String> response = api.passwordSuggestionsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of squads for this club
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void squadsGetTest() throws ApiException {
        String instance = null;
        List<Squad> response = api.squadsGet(instance);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single squad
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void squadsIdGetTest() throws ApiException {
        String id = null;
        Squad response = api.squadsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List subscription requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionRequestsGetTest() throws ApiException {
        List<SubscriptionRequest> response = api.subscriptionRequestsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Details of a single new instance request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionRequestsIdGetTest() throws ApiException {
        String id = null;
        SubscriptionRequest response = api.subscriptionRequestsIdGet(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionRequestsIdPutTest() throws ApiException {
        String id = null;
        SubscriptionRequest body = null;
        SubscriptionRequest response = api.subscriptionRequestsIdPut(id, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Request a new instance for a new club.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void subscriptionRequestsPostTest() throws ApiException {
        SubscriptionRequestSubmission body = null;
        SubscriptionRequest response = api.subscriptionRequestsPost(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * List of tariffs
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tariffsGetTest() throws ApiException {
        List<Tariff> response = api.tariffsGet();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Verify a owner of an access token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPostTest() throws ApiException {
        Member response = api.verifyPost();

        // TODO: test validations
    }
    
}
